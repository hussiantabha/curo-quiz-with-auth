{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\nimport { v4 as uuid } from \"uuid\";\n/**\n * All the routes related to Address are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting all addresses from user.\n * send GET Request at /api/user/addresses\n * */\n\nexport const getAllAddressesHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n\n  if (!userId) {\n    new Response(404, {}, {\n      errors: [\"The email you entered is not Registered. Not Found error\"]\n    });\n  }\n\n  const userAddresses = schema.users.findBy({\n    _id: userId\n  }).address;\n  return new Response(200, {}, {\n    address: userAddresses\n  });\n};\n/**\n * This handler handles adding an address to user.\n * send POST Request at /api/user/address\n * body contains { address }\n * */\n\nexport const addNewAddressHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const userAddresses = schema.users.findBy({\n      _id: userId\n    }).address;\n    const {\n      address\n    } = JSON.parse(request.requestBody);\n    userAddresses.push({\n      address,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      _id: uuid()\n    });\n    this.db.users.update({\n      _id: userId\n    }, {\n      address: userAddresses\n    });\n    return new Response(201, {}, {\n      address: userAddresses\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\n * This handler handles removing an address from user.\n * send DELETE Request at /api/user/address/:addressId\n *\n * */\n\nexport const removeAddressHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    let userAddresses = schema.users.findBy({\n      _id: userId\n    }).address;\n    const addressId = request.params.addressId;\n    userAddresses = userAddresses.filter(item => item._id !== addressId);\n    this.db.users.update({\n      _id: userId\n    }, {\n      address: userAddresses\n    });\n    return new Response(200, {}, {\n      address: userAddresses\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/admin/Desktop/Neog Projects/curoQuiz-backend/curo-quiz-with-auth/src/backend/controllers/AddressController.js"],"names":["Response","formatDate","requiresAuth","v4","uuid","getAllAddressesHandler","schema","request","userId","call","errors","userAddresses","users","findBy","_id","address","addNewAddressHandler","JSON","parse","requestBody","push","createdAt","updatedAt","db","update","error","removeAddressHandler","addressId","params","filter","item"],"mappings":"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","sourcesContent":["import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\nimport { v4 as uuid } from \"uuid\";\n/**\n * All the routes related to Address are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting all addresses from user.\n * send GET Request at /api/user/addresses\n * */\n\nexport const getAllAddressesHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  if (!userId) {\n    new Response(\n      404,\n      {},\n      {\n        errors: [\"The email you entered is not Registered. Not Found error\"],\n      }\n    );\n  }\n  const userAddresses = schema.users.findBy({ _id: userId }).address;\n  return new Response(200, {}, { address: userAddresses });\n};\n\n/**\n * This handler handles adding an address to user.\n * send POST Request at /api/user/address\n * body contains { address }\n * */\n\nexport const addNewAddressHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const userAddresses = schema.users.findBy({ _id: userId }).address;\n    const { address } = JSON.parse(request.requestBody);\n   \n    userAddresses.push({\n      address,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      _id: uuid(),\n    });\n    this.db.users.update({ _id: userId }, { address: userAddresses });\n    return new Response(201, {}, { address: userAddresses });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles removing an address from user.\n * send DELETE Request at /api/user/address/:addressId\n *\n * */\n\nexport const removeAddressHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    let userAddresses = schema.users.findBy({ _id: userId }).address;\n    const addressId = request.params.addressId;\n    userAddresses = userAddresses.filter((item) => item._id !== addressId);\n    this.db.users.update({ _id: userId }, { address: userAddresses });\n    return new Response(200, {}, { address: userAddresses });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}