{"ast":null,"code":"import { Response } from \"miragejs\";\nimport dayjs from \"dayjs\";\nimport jwt_decode from \"jwt-decode\";\nexport const requiresAuth = function (request) {\n  const encodedToken = request.requestHeaders.authorization;\n  const decodedToken = jwt_decode(encodedToken, process.env.REACT_APP_JWT_SECRET);\n\n  if (decodedToken) {\n    const user = this.db.users.findBy({\n      email: decodedToken.email\n    });\n\n    if (user) {\n      return user._id;\n    }\n  }\n\n  return new Response(401, {}, {\n    errors: [\"The token is invalid. Unauthorized access error.\"]\n  });\n};\nexport const formatDate = () => dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/Neog Projects/curoQuiz-backend/curo-quiz-with-auth/src/backend/utils/authUtils.js"],"names":["Response","dayjs","jwt_decode","requiresAuth","request","encodedToken","requestHeaders","authorization","decodedToken","process","env","REACT_APP_JWT_SECRET","user","db","users","findBy","email","_id","errors","formatDate","format"],"mappings":"AAAA,SAASA,QAAT,QAAyB,UAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,MAAMC,YAAY,GAAG,UAAUC,OAAV,EAAmB;AAC7C,QAAMC,YAAY,GAAGD,OAAO,CAACE,cAAR,CAAuBC,aAA5C;AACA,QAAMC,YAAY,GAAGN,UAAU,CAC7BG,YAD6B,EAE7BI,OAAO,CAACC,GAAR,CAAYC,oBAFiB,CAA/B;;AAIA,MAAIH,YAAJ,EAAkB;AAChB,UAAMI,IAAI,GAAG,KAAKC,EAAL,CAAQC,KAAR,CAAcC,MAAd,CAAqB;AAAEC,MAAAA,KAAK,EAAER,YAAY,CAACQ;AAAtB,KAArB,CAAb;;AACA,QAAIJ,IAAJ,EAAU;AACR,aAAOA,IAAI,CAACK,GAAZ;AACD;AACF;;AACD,SAAO,IAAIjB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AAAEkB,IAAAA,MAAM,EAAE,CAAC,kDAAD;AAAV,GAHK,CAAP;AAKD,CAjBM;AAmBP,OAAO,MAAMC,UAAU,GAAG,MAAMlB,KAAK,GAAGmB,MAAR,CAAe,sBAAf,CAAzB","sourcesContent":["import { Response } from \"miragejs\";\nimport dayjs from \"dayjs\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const requiresAuth = function (request) {\n  const encodedToken = request.requestHeaders.authorization;\n  const decodedToken = jwt_decode(\n    encodedToken,\n    process.env.REACT_APP_JWT_SECRET\n  );\n  if (decodedToken) {\n    const user = this.db.users.findBy({ email: decodedToken.email });\n    if (user) {\n      return user._id;\n    }\n  }\n  return new Response(\n    401,\n    {},\n    { errors: [\"The token is invalid. Unauthorized access error.\"] }\n  );\n};\n\nexport const formatDate = () => dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\");\n"]},"metadata":{},"sourceType":"module"}